Anotações do curso de Java com Orientação a Objetos

-----------------------

Aula 01

POO (Programação Orientada a Objetos) / OOP (Object-Oriented Programming)

Evolução das linguagens de programação:

Programação Baixo Nível
Programação Linear
Programação Estruturada
Programação Modular
Programação Orientada a Objetos

Vantagens:

COMERNada

Confiável - O isolamento entre as partes gera software seguro. Ao alterar uma parte, nenhuma outra é afetada.
Oportuno - Ao dividir tudo em partes, várias delas podem ser desenvolvidas em paralelo.
Manutenível - Atualizar um software é mais fácil. Uma pequena modificação vai beneficiar todas as partes que usarem o objeto.
Extensível - O software não é estático. Ele deve crescer para permanecer útil.
Reutilizável - Podemos usar objetos de um sistema que criamos em outro sistema futuro.
Natural - Mais fácil de entender. Você se preocupa mais na funcionalidade do que nos detalhes de implementação.

-----------------------

Aula 02

Objeto - Coisa material ou abstrata que pode ser percebida pelos sentidos e descrita por meio das suas características, comportamentos e estado atual.

Tudo que tiver característica, comportamento e estado pode ser considerado um objeto.

Resumindo, todo objeto tem:

- Atributos
- Métodos
- Estado

Todo objeto vem à partir de uma classe (molde)

Toda classificação de estado, sempre é dada em um momento específico. Basicamente é toda característica que podemos identificar, através dos atributos

Instanciar - Quando eu gero um objeto à partir de uma classe

Definição

Classe - Define os atributos e métodos comuns que serão compartilhados por um objeto
Objeto - É a instância de uma classe

Abstração: Escolher apenas o que for importante para um projeto

-----------------------

Aula 03

UML - Linguagem de Modelagem Unificada (estudar sobre o assunto posteriormente)

- Diagrama de Classes
- Modificadores de Visibilidade

Visibilidade - Indica o nível de acesso aos componentes internos de uma classe

+ Público: A classe atual e todas as outras classes
- Privado: Somente a classe atual
# Protegido: A classe atual e todas as suas sub-classes

-----------------------

Aula 04

Métodos Especiais

- Métodos Acessores (Getters)
- Métodos Modificadores (Setters)
- Métodos Construtores (Construct)

-----------------------

Aula 05

Exemplo prático com resumo de tudo que foi aprendido

-----------------------

Aula 06

Encapsulamento

3 Pilares da Programação Orientada a Objetos

- Encapsulamento
- Herança
- Polimorfismo

Encapsular - Ocultar partes independentes da implementação, permitindo construir partes invisíveis ao mundo exterior
Interface - Lista de serviços fornecidos por um componente. É o contato com o mundo exterior, que define o que pode ser feito com um objeto dessa classe.

* Encapsular não é obrigatório, mas é uma boa prática para produzir classes mais eficientes

Vantagens de encapsular:

1 - Tornar mudanças invisíveis
2 - Facilitar reutilização do código
3 - Reduzir efeitos colaterais

-----------------------

Aula 07

Relacionamento entre Classes

Objetos Compostos (Vetor de Objetos)

-----------------------

Aula 08

Relacionamento de Agregação

-----------------------

Aula 09

Exercícios de POO

-----------------------

Aula 10

Herança

- Permite basear uma nova classe na definição de uma outra classe previamente existente
- A herança será aplicada tanto para as características quanto para os comportamentos

Nomenclaturas utilizadas sobre o conceito de herança

- Classe Mãe / Progenitora / Superclasse
- Classe Filha / Subclasse

-----------------------

Aula 11

Herança

# Navegação pela Herança

Nomenclaturas

- Raiz
- Folha

- Ancestral
- Descendente

- Generalização 
- Especialização

# Tipos de Herança

1 - Herança de Implementação (Herança Pobre)
2 - Herança para Diferença

# Abstrato e Final

- Classe Abstrata: Não pode ser instanciada. Só pode servir como progenitora.
- Método Abstrato: Declarado, mas não implementado na progenitora.
- Classe Final: Não pode ser herdada por outra classe. Obrigatoriamente folha.
- Método Final: Não pode ser sobrescrito pelas suas sub-classes. Obrigatoriamente herdado.

-----------------------

Aula 12

Polimorfismo

- Poli: muitas / Morfo: formas
- Permite que um mesmo nome represente vários comportamentos diferentes

# Assinatura do Método

- É diferenciada pela quantidade e os tipos dos parâmetros

# Tipos de polimorfismo

1 - Sobreposição
2 - Sobrecarga

Polimorfismo de Sobreposição: Acontece quando substituímos um método de uma superclasse na sua subclasse, usando a mesma assinatura.

-----------------------

Aula 13

Polimorfismo

1 - Polimorfismo de Sobreposição: Mesma assinatura em classes diferentes
2 - Polimorfismo de Sobrecarga: Assinaturas diferentes na mesma classe

-----------------------

Aula 14

Exercícios de POO

-----------------------

Aula 15

Exercícios de POO

-----------------------
